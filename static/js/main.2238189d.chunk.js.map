{"version":3,"sources":["util/validation.js","App.js","serviceWorker.js","index.js"],"names":["inputCheck","side","errors","isNaN","push","validateSides","side1","side2","side3","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","field","e","setState","defineProperty","target","value","handleSubmit","_this$state","state","results","parseFloat","submitEnabled","every","renderErrors","renderError","length","map","error","idx","react_default","a","createElement","key","_this$state2","isEnabled","side1Error","side2Error","side3Error","console","log","className","type","style","display","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2238189d.chunk.js","sourcesContent":["\n// Check to see if input is a numerical value and is greater than 0\nexport const inputCheck = (side) => {\n    const errors = []\n\n    if(side === \"\"){\n      return errors\n    } else if(isNaN(side)){\n      errors.push(\"Must Enter In A Numeric Value\")\n    } else if(side <= 0){\n      errors.push(\"Must Enter A Value Greater Than 0\")\n    }\n\n    return errors\n}\n\n// Check to see what type of triangle based on sides passed as arguments\nexport const validateSides = (side1, side2, side3) => {\n    let results\n    \n    if((side1 > side2 + side3) || (side2 > side1 + side3) || (side3 > side1 + side2)){\n      results = \"Impossible\"\n    }else if (side1 !== side2 && side2 !== side3 & side3 !== side1){\n      results = \"Scalene\"\n    }else if(side1 === side2 && side2 === side3 && side3 === side1){\n      results = \"Equilateral\"\n    }else{\n      results = \"Isoceles\"\n    }\n\n    return results\n}","import React, { Component } from \"react\";\nimport { inputCheck, validateSides } from \"./util/validation\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      side1: \"\",\n      side2: \"\",\n      side3: \"\",\n      results: \"\"\n    };\n  }\n\n  // Update the component state with the user input\n  onChange = field => {\n    return e => {\n      this.setState({ [field]: e.target.value });\n    };\n  };\n\n  // Calculates the type of triangle on submit and sets the results in the component state to be rendered on the Dom\n  handleSubmit = () => {\n    const { side1, side2, side3 } = this.state;\n    let results = validateSides(\n      parseFloat(side1),\n      parseFloat(side2),\n      parseFloat(side3)\n    );\n\n    this.setState({ results: results });\n  };\n\n  // Allows submit button to be enabled only if side is greater than 0 and is a numeric value\n  submitEnabled = (side1, side2, side3) => {\n    return [side1, side2, side3].every(side => !isNaN(side) && side > 0);\n  };\n\n  // renders errors based on user input and returns a html element to be rendered on the Dom.\n  renderErrors = side => {\n    let errors = inputCheck(side);\n    let renderError;\n\n    if (errors.length !== 0) {\n      renderError = errors.map((error, idx) => <p key={idx}>{error}</p>);\n    }\n\n    return renderError;\n  };\n\n  render() {\n    const { side1, side2, side3, results } = this.state;\n    const isEnabled = this.submitEnabled(side1, side2, side3);\n    const side1Error = this.renderErrors(side1);\n    const side2Error = this.renderErrors(side2);\n    const side3Error = this.renderErrors(side3);\n\n    console.log(this.state.results);\n\n    return (\n      <div className=\"App\">\n        <div className=\"input-container\">\n          <div className=\"input-item\">\n            <h3>Side 1</h3>\n            <input onChange={this.onChange(\"side1\")} type=\"text\" />\n            <span className=\"error-display\">{side1Error}</span>\n          </div>\n\n          <div className=\"input-item\">\n            <h3>Side 2</h3>\n            <input onChange={this.onChange(\"side2\")} type=\"text\" />\n            <span className=\"error-display\">{side2Error}</span>\n          </div>\n\n          <div className=\"input-item\">\n            <h3>Side 3</h3>\n            <input onChange={this.onChange(\"side3\")} type=\"text\" />\n            <span\n              style={side3Error ? { display: \"block\" } : { display: \"hidden\" }}\n              className=\"error-display\"\n            >\n              {side3Error}\n            </span>\n          </div>\n        </div>\n        <div className=\"button-container\">\n          <button disabled={!isEnabled} onClick={this.handleSubmit}>\n            Submit\n          </button>\n        </div>\n        <div className=\"results-container\">\n          <div className=\"full header\">\n            <div className=\"header-title\">\n              <h2>Type of Triangle</h2>\n              <h1>{results}</h1>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}